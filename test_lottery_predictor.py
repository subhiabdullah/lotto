import unittest
from lottery_predictor import LotteryPredictor
from draws_data import draws


class TestLotteryPredictor(unittest.TestCase):

    def setUp(self):
        self.draws =  [
  [6, 12, 25, 31, 37, 6, 9],
  [3, 17, 19, 32, 38, 6, 7],
  [2, 9, 38, 40, 44, 5, 11],
  [10, 16, 34, 36, 49, 3, 7],
  [3, 9, 11, 20, 39, 2, 3],
  [7, 16, 22, 38, 41, 5, 9],
  [14, 16, 24, 40, 43, 1, 5],
  [2, 4, 12, 31, 50, 6, 8],
  [11, 15, 17, 24, 46, 2, 11],
  [9, 18, 20, 40, 41, 3, 9],
  [19, 21, 23, 36, 39, 5, 12],
  [3, 14, 23, 41, 43, 2, 6],
  [7, 10, 13, 34, 47, 5, 9],
  [2, 3, 18, 23, 39, 6, 8],
  [9, 18, 30, 34, 48, 1, 7],
  [5, 19, 33, 36, 42, 7, 12],
  [11, 29, 32, 46, 47, 5, 7],
  [8, 13, 24, 35, 46, 6, 8],
  [5, 7, 21, 22, 29, 3, 10],
  [8, 9, 11, 13, 50, 6, 11],
  [2, 8, 16, 21, 39, 4, 5],
  [1, 3, 29, 45, 47, 5, 8],
  [1, 2, 11, 14, 36, 2, 3],
  [1, 5, 8, 20, 35, 3, 12],
  [28, 30, 31, 45, 46, 4, 8],
  [10, 27, 30, 32, 34, 5, 8],
  [6, 11, 29, 34, 39, 2, 3],
  [17, 18, 30, 33, 35, 6, 8],
  [11, 12, 13, 23, 26, 11, 12],
  [4, 8, 9, 30, 35, 6, 7],
  [12, 21, 24, 28, 40, 1, 3],
  [5, 13, 16, 41, 45, 3, 6],
  [16, 28, 31, 35, 42, 2, 10],
  [7, 11, 20, 21, 29, 6, 11],
  [5, 19, 33, 37, 42, 7, 9],
  [16, 28, 32, 36, 48, 5, 10],
  [1, 15, 19, 24, 33, 7, 8],
  [10, 11, 31, 37, 44, 5, 12],
  [6, 12, 36, 37, 44, 1, 11],
  [6, 21, 23, 26, 43, 3, 9],
  [3, 37, 45, 47, 50, 5, 10],
  [28, 33, 34, 37, 44, 4, 11],
  [9, 34, 35, 42, 44, 6, 11],
  [6, 11, 26, 43, 49, 5, 8],
  [9, 14, 15, 20, 47, 8, 12],
  [3, 13, 33, 36, 47, 3, 11],
  [6, 8, 13, 21, 32, 3, 6],
  [8, 12, 37, 44, 47, 7, 10],
  [6, 12, 25, 48, 49, 11, 12],
  [9, 16, 32, 37, 46, 7, 12],
  [4, 6, 8, 42, 48, 6, 11],
  [11, 20, 23, 37, 46, 9, 11],
  [13, 14, 25, 28, 42, 11, 12],
  [1, 7, 11, 33, 48, 9, 12],
  [11, 15, 24, 28, 41, 3, 12],
  [15, 17, 23, 35, 38, 4, 9],
  [7, 9, 40, 48, 49, 7, 8],
  [18, 32, 39, 42, 44, 4, 7],
  [4, 5, 21, 30, 43, 5, 11],
  [17, 26, 35, 37, 39, 3, 4],
  [2, 11, 18, 47, 49, 2, 7],
  [13, 18, 24, 34, 50, 5, 6],
  [3, 5, 8, 10, 44, 7, 12],
  [7, 35, 36, 39, 47, 3, 8],
  [16, 17, 26, 30, 35, 3, 9],
  [17, 42, 43, 48, 49, 3, 7],
  [8, 12, 15, 17, 46, 1, 8],
  [15, 23, 26, 31, 44, 1, 8],
  [20, 30, 38, 39, 44, 2, 12],
  [2, 13, 22, 36, 40, 3, 5],
  [16, 25, 27, 41, 45, 3, 9],
  [20, 22, 26, 34, 40, 8, 12],
  [9, 18, 26, 41, 43, 4, 9],
  [6, 10, 11, 20, 38, 3, 9],
  [2, 5, 11, 22, 24, 7, 12],
  [18, 27, 41, 45, 49, 7, 9],
  [2, 6, 18, 29, 37, 10, 12],
  [2, 9, 18, 21, 39, 4, 10],
  [4, 13, 32, 39, 41, 6, 8],
  [4, 17, 32, 34, 49, 4, 9],
  [14, 32, 34, 38, 46, 2, 5],
  [23, 26, 36, 40, 44, 5, 10],
  [10, 12, 17, 31, 49, 2, 8],
  [6, 11, 39, 40, 47, 7, 8],
  [14, 26, 29, 46, 50, 10, 11],
  [1, 2, 7, 24, 25, 2, 5],
  [1, 11, 17, 19, 33, 3, 7],
  [20, 23, 24, 37, 43, 9, 10],
  [9, 11, 16, 19, 32, 3, 5],
  [3, 16, 26, 30, 47, 1, 2],
  [6, 10, 22, 30, 36, 8, 10],
  [7, 16, 28, 36, 43, 2, 11],
  [4, 10, 24, 34, 35, 7, 8],
  [2, 10, 23, 29, 50, 3, 10],
  [13, 24, 30, 35, 48, 4, 5],
  [6, 10, 17, 29, 49, 2, 5],
  [1, 2, 23, 43, 45, 1, 9],
  [11, 28, 30, 35, 50, 7, 8],
  [3, 21, 23, 28, 46, 10, 12],
  [5, 7, 45, 48, 49, 3, 8],
  [4, 22, 27, 39, 41, 1, 9],
  [14, 30, 37, 39, 50, 4, 12],
  [8, 26, 29, 41, 48, 3, 5],
  [25, 26, 40, 45, 47, 4, 5],
  [4, 22, 28, 32, 47, 1, 2],
  [2, 13, 41, 45, 50, 2, 3],
  [7, 13, 30, 43, 47, 7, 11],
  [3, 7, 34, 43, 50, 5, 10],
  [5, 6, 39, 49, 50, 10, 12],
  [6, 13, 22, 24, 30, 5, 10],
  [5, 6, 17, 18, 34, 1, 11],
  [10, 27, 32, 41, 49, 1, 9],
  [2, 18, 28, 42, 50, 2, 11],
  [3, 7, 15, 17, 35, 3, 4],
  [2, 5, 10, 20, 24, 4, 7],
  [19, 20, 24, 36, 41, 4, 5],
  [2, 26, 41, 45, 48, 5, 12],
  [9, 10, 28, 38, 48, 8, 12],
  [7, 8, 35, 37, 49, 5, 8],
  [10, 15, 18, 24, 39, 2, 11],
  [11, 20, 31, 35, 46, 6, 10],
  [1, 8, 33, 38, 43, 2, 6],
  [5, 31, 39, 46, 49, 8, 9],
  [1, 17, 20, 36, 49, 6, 9],
  [4, 19, 34, 41, 43, 1, 5],
  [5, 10, 25, 29, 32, 4, 7],
  [5, 10, 26, 37, 42, 3, 10],
  [12, 18, 27, 33, 41, 9, 10],
  [5, 21, 23, 29, 35, 7, 9],
  [2, 5, 9, 29, 32, 2, 4],
  [9, 15, 27, 41, 44, 2, 4],
  [8, 17, 21, 23, 47, 2, 6],
  [5, 8, 22, 32, 39, 7, 8],
  [11, 20, 24, 25, 35, 4, 8],
  [17, 28, 31, 35, 39, 5, 8],
  [13, 20, 22, 27, 42, 3, 5],
  [2, 13, 21, 24, 37, 6, 7],
  [1, 21, 32, 36, 50, 2, 5],
  [1, 4, 7, 21, 26, 4, 7],
  [25, 29, 38, 41, 44, 3, 8],
  [3, 5, 7, 12, 31, 5, 7],
  [7, 17, 18, 19, 22, 4, 5],
  [6, 14, 18, 19, 48, 3, 8],
  [6, 11, 17, 43, 49, 4, 8],
  [26, 28, 40, 49, 50, 2, 7],
  [5, 14, 16, 34, 39, 1, 6],
  [18, 29, 41, 44, 49, 1, 5],
  [10, 14, 15, 24, 47, 4, 8],
  [15, 23, 25, 46, 49, 2, 4],
  [8, 22, 28, 40, 42, 4, 8],
  [9, 20, 21, 33, 49, 5, 7],
  [3, 16, 30, 34, 35, 2, 5],
  [6, 11, 40, 46, 48, 3, 6],
  [12, 15, 18, 24, 25, 4, 5],
  [9, 22, 23, 34, 35, 1, 3],
  [6, 9, 13, 14, 25, 1, 8],
  [8, 12, 27, 31, 37, 3, 6],
  [10, 22, 24, 33, 38, 2, 6],
  [5, 8, 19, 33, 36, 2, 3],
  [13, 14, 16, 47, 49, 1, 7],
  [6, 10, 17, 18, 42, 1, 3],
  [10, 15, 16, 36, 44, 7, 8],
  [11, 28, 34, 37, 38, 3, 7],
  [4, 11, 26, 32, 41, 5, 7],
  [12, 18, 43, 44, 46, 4, 5],
  [15, 21, 38, 39, 47, 1, 5],
  [29, 30, 35, 41, 45, 3, 5],
  [10, 13, 19, 40, 45, 3, 5],
  [10, 16, 30, 41, 45, 2, 8],
  [5, 11, 12, 27, 32, 1, 3],
  [7, 8, 34, 36, 38, 4, 5],
  [5, 7, 12, 19, 26, 1, 5],
  [5, 8, 21, 37, 46, 6, 8]
]


        self.predictor = LotteryPredictor(self.draws)

    def test_analyze_draw(self):
        analysis = self.predictor.analyze_draw([6, 12, 25, 31, 37, 6, 9])
        self.assertEqual(analysis["mean"], 18)
        self.assertEqual(analysis["median"], 25)
        self.assertEqual(analysis["mode"], "No unique mode")
        self.assertEqual(analysis["frequencies"], {6: 2, 12: 1, 25: 1, 31: 1, 37: 1, 9: 1})

    def test_most_common(self):
        prediction, explanation = self.predictor.most_common()
        self.assertEqual(explanation, "Most common numbers")
        self.assertTrue(len(prediction), 6)

    def test_least_common(self):
        prediction, explanation = self.predictor.least_common()
        self.assertEqual(explanation, "Least common numbers")
        self.assertTrue(len(prediction), 6)

    def test_last_draw(self):
        prediction, explanation = self.predictor.last_draw()
        self.assertEqual(explanation, "Based on the last draw")
        self.assertTrue(len(prediction), 7)

    def test_mixed_approach(self):
        prediction, explanation = self.predictor.mixed_approach()
        self.assertEqual(explanation, "Mix of common and uncommon numbers")
        self.assertTrue(len(prediction), 7)

    def test_random_numbers(self):
        prediction, explanation = self.predictor.random_numbers()
        self.assertEqual(explanation, "Randomly generated numbers")
        self.assertTrue(len(prediction), 7)

    def test_neural_network(self):
        prediction, explanation = self.predictor.neural_network()
        self.assertEqual(explanation, "Neural network prediction")
        self.assertTrue(len(prediction), 2)

    def test_future_predictions(self):
        future_draws = self.predictor.future_predictions(10)
        self.assertTrue(len(future_draws), 10)
        for draw in future_draws:
            self.assertTrue(len(draw), 7)

if __name__ == '__main__':
    unittest.main()
